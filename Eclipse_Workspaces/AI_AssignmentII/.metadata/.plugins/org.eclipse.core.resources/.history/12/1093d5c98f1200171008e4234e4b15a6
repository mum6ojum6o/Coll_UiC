package aima.core.assignments.decisionTree;

import java.util.*;

import aima.core.learning.framework.DataSet;
import aima.core.learning.framework.DataSetFactory;
import aima.core.learning.framework.DataSetSpecification;
import aima.core.learning.framework.Example;
import aima.core.learning.inductive.DLTestFactory;
import aima.core.learning.learners.DecisionListLearner;
import aima.core.learning.learners.DecisionTreeLearner;
import aima.core.util.Util;
public class TestDecTree {
	
public static void main(String[]args){
	decisionTreeDemo();
	//decisionListDemo();
}

public static void decisionTreeDemo(){
		try {
			ArrayList <DataSet>partitions = new ArrayList<DataSet>();
			
			DataSet ds = getDiabetesDataSet();
			
			//DecisionTreeLearner learnerWithGR = new DecisionTreeLearner();
			//learnerWithGR.trainWithGR(ds);
			DecisionTreeLearner learner = new DecisionTreeLearner();
			//
			//System.out.println("glucose's split info:"+ds.getSplitInfo("glucose"));
			//System.out.println("pregnant's split info:"+ds.getSplitInfo("pregnant"));
			partitions=TestDecTree.datasetSCV(ds,5);
			double avgErrRate=0.0;
			double avgErrRateGR=0.0;
			
			for (int i=0;i<partitions.size();i++){
			DataSet testData;
			/*learnerWithGR.trainWithGR(partitions.get(1));
			learnerWithGR.trainWithGR(partitions.get(2));
			learnerWithGR.trainWithGR(partitions.get(3));
			learnerWithGR.trainWithGR(partitions.get(4));
			learnerWithGR.test(partitions.get(0));*/
			testData = partitions.get(i);
			
			for (int j=0;j<partitions.size();j++){
				if (j==i)
					continue;
				learner.train(partitions.get(j));
				//learnerWithGR.trainWithGR(partitions.get(i));
				
			}
			int results[]=learner.test(testData);
			System.out.println("results length"+results.length);
			System.out.println("The Induced Decision Tree is with Gain");
			System.out.println(learner.getDecisionTree());
			System.out.println("\nThis Decision Tree classifies the data set "
					+ results[0]+ " successes"+ " and "	+ results[1]+ " failures");
			System.out.println("Error Rate:"+ (double)results[1]/testData.size());
			avgErrRate+=(double)results[1]/testData.size();
			System.out.println("\n");
			/*int resultsGR[]=learnerWithGR.test(testData);
			System.out.println("resultsGR length"+resultsGR.length);
			//System.out.println("The Induced Decision Tree with Gain Ratio is ");
			//System.out.println(learnerWithGR.getDecisionTree());
			System.out.println("\nThis Decision Tree(with Gain Ratio) classifies the data set with "
					+ resultsGR[0]+ " successes"+ " and "	+ resultsGR[1]+ " failures ");
			avgErrRateGR+=((double)resultsGR[1]/testData.size());
			System.out.println("\n");*/
			
			}
			System.out.println("Average Error Rate with Information Gain:"+avgErrRate/partitions.size());
			System.out.println("Average Error Rate with Gain Ratio:"+ avgErrRateGR/partitions.size());
			
		}catch (Exception e) {
			System.out.println("Decision Tree Demo Failed  ");
			e.printStackTrace();
		}
	}
public static void decisionListDemo() {
	try {
		System.out.println(Util.ntimes("*", 100));
		System.out.println("DecisionList Demo - Inducing a DecisionList from the diabestes DataSet\n ");
		System.out.println(Util.ntimes("*", 100));
		DataSet ds = getDiabetesDataSet();
		DecisionListLearner learner = new DecisionListLearner("Yes", "No",new DLTestFactory());
		learner.train(ds);
		System.out.println("The Induced DecisionList is");
		System.out.println(learner.getDecisionList());
		int[] result = learner.test(ds);

		System.out
				.println("\nThis Decision List classifies the data set with "
						+ result[0]
						+ " successes"
						+ " and "
						+ result[1]
						+ " failures");
		System.out.println("\n");

	} catch (Exception e) {
		System.out.println("Decision ListDemo Failed");
		e.printStackTrace();
	}
}

static ArrayList<DataSet> datasetSCV(DataSet ds, int numberOfPartitions){
	ArrayList<DataSet> partitions=new ArrayList<DataSet>();
	int dataSetSize=ds.size();
	System.out.println("DataSet Size"+dataSetSize);
	int partitionSize=(int)dataSetSize/numberOfPartitions;
	List<String> targetAttributeValues= new ArrayList<String>();
	int positiveCount=0;
	//System.out.println("Attributevalue Size"+targetAttributeValues.size());
	for (Example e: ds.examples){
		if (e.getAttributeValueAsString("diabetes").equals("1"))
			positiveCount++;
	}
	System.out.println("Positive Count:"+positiveCount);
	int positiveCountInPartition = (int)(((double)positiveCount/dataSetSize)*partitionSize);
	System.out.println("Partition Size:"+partitionSize);
	System.out.println("positiveCountInPartition:"+positiveCountInPartition);
	/*  Making the partitions*/
	
	for (int i=0;i<5;i++){
		int posCount=0;//pos result counter
		int totalExpCount=0;//neg result counter
		int curParSize=0; //total examples in the partition
		DataSet testDataSet= new DataSet(createDiabetesDataSetSpec());
		int exampleCheck[] = new int[dataSetSize]; //array tracks examples already added in a partition
		Random rand = new Random();
	while (curParSize<dataSetSize){ //loop until current partition size < permissible partition size
		int n = rand.nextInt(768); //generate a random number 
		if (exampleCheck[n]==0){ //if the example has not been added to the partition.. proceed
			Example e=ds.getExample(n); //extract the partition.
			
			if (curParSize>=partitionSize)//could be neglected
				break;
			//if the target value of the example is 1
			if (e.getAttributeValueAsString("diabetes").equals("1") && posCount<positiveCountInPartition){
				testDataSet.add(e); //add to test dataset
				posCount++;
				exampleCheck[n]=1;
			}
			//if the target value of the example is 0
			else if(e.getAttributeValueAsString("diabetes").equals("0") && totalExpCount<curParSize){
				testDataSet.add(e); //add to test dataset
				totalExpCount++;
				exampleCheck[n]=1;
				//ds.removeExample(e);
			}
		}
		curParSize=posCount+totalExpCount;
		//else continue;
		
	}
	partitions.add(testDataSet);
	/*System.out.println("Test Data Set size:"+testDataSet.size());
	System.out.println("Learn Data Set size:"+ds.size());
	int validator=0;
	for (int x:exampleCheck){
		if (x==1)
			validator++;
	}
	System.out.println("Number of examples added:"+validator);*/
	}
	
	return partitions;
	}
public static DataSetSpecification createDiabetesDataSetSpecDiscretized() {
	DataSetSpecification dss = new DataSetSpecification();
	dss.defineStringAttribute("pregnant", new String[]{"6","1",
			"8","0","5","3","16","10","2","4","7",
			"9","11","13","15",	"17","12","14"} );
	//Citing:-http://www.diabetes.org/diabetes-basics/diagnosis/?referrer=https://www.google.com/
	dss.defineStringAttribute("glucose", new String[]{"Normal","Low Risk","High Risk"} );
	//Citing:=http://www.webmd.boots.com/hypertension-high-blood-pressure/guide/diastolic-systolic
	dss.defineStringAttribute("pressure",new String[]{"Less","Normal","High"} );
	dss.defineStringAttribute("triceps",new String[]{"35","29","0","23","32","45","19","47","38","30","41","33","26","15","36","11",
			"31","37","42","25","18","24","39","27","21","34","10","60","13","20","22","28",
			"54","40","51","56","14","17","50","44","12","46","16","7","52","43","48","8",
			"49","63","99"} );
	dss.defineStringAttribute("insulin", new String[]{"0","94","168","88","543","846","175","230","83","96","235","146","115","140","110","245","54","192","207","70","240","82","36","23","300","342","304","142","128","38","100","90","270","71","125","176","48","64","228","76","220","40","152","18","135","495","37","51","99","145","225","49","50","92","325","63","284","119","204","155","485","53","114","105","285","156","78","130","55","58","160","210","318","44","190","280","87","271","129","120","478","56","32","744","370","45","194","680","402","258","375","150","67","57","116","278","122","545","75","74","182","360","215","184","42","132","148","180","205","85","231","29","68","52","255","171","73","108","43","167","249","293","66","465","89","158","84","72","59","81","196","415","275","165","579","310","61","474","170","277","60","14","95","237","191","328","250","480","265","193","79","86","326","188","106","65","166","274","77","126","330","600","185","25","41","272","321","144","15","183","91","46","440","159","540","200","335","387","22","291","392","178","127","510","16","112"});
	dss.defineStringAttribute("bmi",new String[]{"0","1","2","3"} );
	dss.defineStringAttribute("pedigree", new String []{"0","1","2"});
	dss.defineStringAttribute("age",new String [] {"50","31","32","21","33","30","26","29","53","54","34","57","59","51","27","41","43","22","38","60","28","45","35","46","56","37","48","40","25","24","58","42","44","39","36","23","61","69","62","55","65","47","52","66","49","63","67","72","81","64","70","68"} );
	dss.defineStringAttribute("diabetes", new String []{"0","1"} );
	// last attribute is the target attribute unless the target is
	// explicitly reset with dss.setTarget(name)
	

	return dss;
}

public static DataSet getDiabetesDataSet() throws Exception {
	//DataSetSpecification spec = createDiabetesDataSetSpec();
	DataSetSpecification spec = createDiabetesDataSetSpecDiscretized();
	//DataSetSpecification spec = createDiabDataSetSpec();
	return new DataSetFactory().fromFile("diabetes", spec, "\\s+");
}
public static DataSetSpecification createDiabetesDataSetSpec() {
	DataSetSpecification dss = new DataSetSpecification();
	dss.defineStringAttribute("pregnant", new String[]{"6","1",
			"8","0","5","3","16","10","2","4","7",
			"9","11","13","15",	"17","12","14"} );
	dss.defineStringAttribute("glucose", new String[]{"0","44","56","57","61","62","65","67","68",
			"71","72","73","74","75","76","77","78","79","80","81","82",
			"83","84","85","86","87","88","89","90","91","92","93","94","95",
			"96","97","98","99","100","101","102","103","104","105","106","107",
			"108","109","110","111","112","113","114","115","116","117","118","119",
			"120","121","122","123","124","125","126","127","128","129","130","131",
			"132","133","134","135","136","137","138","139","140","141","142","143",
			"144","145","146","147","148","149","150","151","152","153","154","155",
			"156","157","158","159","160","161","162","163","164","165","166","167",
			"168","169","170","171","172","173","174","175","176","177","178","179",
			"180","181","182","183","184","186","187","188","189","190","191","193",
			"194","195","196","197","198","199"} );
	dss.defineStringAttribute("pressure",new String[]{"72","66","64","40","74","50","0","70","96",
			"92","80","60","84","30","88","90","94","76","82","75","58","78","68",
			"110","56","62","85","86","48","44","65","108","55","122","54","52","98",
			"104","95","46","102","100","61","24","38","106","114"} );
	dss.defineStringAttribute("triceps",new String[]{"35","29","0","23","32","45","19","47","38","30","41","33","26","15","36","11",
			"31","37","42","25","18","24","39","27","21","34","10","60","13","20","22","28",
			"54","40","51","56","14","17","50","44","12","46","16","7","52","43","48","8",
			"49","63","99"} );
	dss.defineStringAttribute("insulin", new String[]{"0","94","168","88","543","846","175","230","83","96","235","146","115","140","110","245","54","192","207","70","240","82","36","23","300","342","304","142","128","38","100","90","270","71","125","176","48","64","228","76","220","40","152","18","135","495","37","51","99","145","225","49","50","92","325","63","284","119","204","155","485","53","114","105","285","156","78","130","55","58","160","210","318","44","190","280","87","271","129","120","478","56","32","744","370","45","194","680","402","258","375","150","67","57","116","278","122","545","75","74","182","360","215","184","42","132","148","180","205","85","231","29","68","52","255","171","73","108","43","167","249","293","66","465","89","158","84","72","59","81","196","415","275","165","579","310","61","474","170","277","60","14","95","237","191","328","250","480","265","193","79","86","326","188","106","65","166","274","77","126","330","600","185","25","41","272","321","144","15","183","91","46","440","159","540","200","335","387","22","291","392","178","127","510","16","112"});
	dss.defineStringAttribute("bmi",new String[]{"0","1","2","3"} );
	dss.defineStringAttribute("pedigree", new String []{"0","1","2"});
	dss.defineStringAttribute("age",new String [] {"50","31","32","21","33","30","26","29","53","54","34","57","59","51","27","41","43","22","38","60","28","45","35","46","56","37","48","40","25","24","58","42","44","39","36","23","61","69","62","55","65","47","52","66","49","63","67","72","81","64","70","68"} );
	dss.defineStringAttribute("diabetes", new String []{"0","1"} );
	// last attribute is the target attribute unless the target is
	// explicitly reset with dss.setTarget(name)
	

	return dss;
}

}
